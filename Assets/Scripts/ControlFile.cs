//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Scripts/ControlFile.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ControlFile: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ControlFile()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ControlFile"",
    ""maps"": [
        {
            ""name"": ""Grid"",
            ""id"": ""7b262e65-e00a-464c-b66e-79d9df8d02dc"",
            ""actions"": [
                {
                    ""name"": ""MainClick"",
                    ""type"": ""Button"",
                    ""id"": ""e437244a-e846-4438-a545-456470fd6792"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PenSwitch"",
                    ""type"": ""Button"",
                    ""id"": ""55f67e31-6250-439b-ac35-ef182d5860fe"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LineSwitch"",
                    ""type"": ""Button"",
                    ""id"": ""1d86327a-61a1-4e62-a557-a06a2d84193e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RectangleSwitch"",
                    ""type"": ""Button"",
                    ""id"": ""a294f0ad-efc2-4be0-98b8-9bd05f04dc92"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CircleSwitch"",
                    ""type"": ""Button"",
                    ""id"": ""36513a82-249c-47ac-a98a-c5ec9bb9ced6"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""35ce6588-134c-42be-a161-b73eb6542653"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Mouse+Keyboard"",
                    ""action"": ""MainClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7d0035e7-4e52-4876-96d0-d7143a5677ac"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LineSwitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5eef9975-b024-4be5-895b-f1d34d78d10d"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RectangleSwitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""567f88ee-2f96-42c3-85b9-8105063b920f"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PenSwitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1c0f1ea2-6ba9-4f85-8800-4fc8edc3d4ca"",
                    ""path"": ""<Keyboard>/o"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CircleSwitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Grid
        m_Grid = asset.FindActionMap("Grid", throwIfNotFound: true);
        m_Grid_MainClick = m_Grid.FindAction("MainClick", throwIfNotFound: true);
        m_Grid_PenSwitch = m_Grid.FindAction("PenSwitch", throwIfNotFound: true);
        m_Grid_LineSwitch = m_Grid.FindAction("LineSwitch", throwIfNotFound: true);
        m_Grid_RectangleSwitch = m_Grid.FindAction("RectangleSwitch", throwIfNotFound: true);
        m_Grid_CircleSwitch = m_Grid.FindAction("CircleSwitch", throwIfNotFound: true);
    }

    ~@ControlFile()
    {
        UnityEngine.Debug.Assert(!m_Grid.enabled, "This will cause a leak and performance issues, ControlFile.Grid.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Grid
    private readonly InputActionMap m_Grid;
    private List<IGridActions> m_GridActionsCallbackInterfaces = new List<IGridActions>();
    private readonly InputAction m_Grid_MainClick;
    private readonly InputAction m_Grid_PenSwitch;
    private readonly InputAction m_Grid_LineSwitch;
    private readonly InputAction m_Grid_RectangleSwitch;
    private readonly InputAction m_Grid_CircleSwitch;
    public struct GridActions
    {
        private @ControlFile m_Wrapper;
        public GridActions(@ControlFile wrapper) { m_Wrapper = wrapper; }
        public InputAction @MainClick => m_Wrapper.m_Grid_MainClick;
        public InputAction @PenSwitch => m_Wrapper.m_Grid_PenSwitch;
        public InputAction @LineSwitch => m_Wrapper.m_Grid_LineSwitch;
        public InputAction @RectangleSwitch => m_Wrapper.m_Grid_RectangleSwitch;
        public InputAction @CircleSwitch => m_Wrapper.m_Grid_CircleSwitch;
        public InputActionMap Get() { return m_Wrapper.m_Grid; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GridActions set) { return set.Get(); }
        public void AddCallbacks(IGridActions instance)
        {
            if (instance == null || m_Wrapper.m_GridActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GridActionsCallbackInterfaces.Add(instance);
            @MainClick.started += instance.OnMainClick;
            @MainClick.performed += instance.OnMainClick;
            @MainClick.canceled += instance.OnMainClick;
            @PenSwitch.started += instance.OnPenSwitch;
            @PenSwitch.performed += instance.OnPenSwitch;
            @PenSwitch.canceled += instance.OnPenSwitch;
            @LineSwitch.started += instance.OnLineSwitch;
            @LineSwitch.performed += instance.OnLineSwitch;
            @LineSwitch.canceled += instance.OnLineSwitch;
            @RectangleSwitch.started += instance.OnRectangleSwitch;
            @RectangleSwitch.performed += instance.OnRectangleSwitch;
            @RectangleSwitch.canceled += instance.OnRectangleSwitch;
            @CircleSwitch.started += instance.OnCircleSwitch;
            @CircleSwitch.performed += instance.OnCircleSwitch;
            @CircleSwitch.canceled += instance.OnCircleSwitch;
        }

        private void UnregisterCallbacks(IGridActions instance)
        {
            @MainClick.started -= instance.OnMainClick;
            @MainClick.performed -= instance.OnMainClick;
            @MainClick.canceled -= instance.OnMainClick;
            @PenSwitch.started -= instance.OnPenSwitch;
            @PenSwitch.performed -= instance.OnPenSwitch;
            @PenSwitch.canceled -= instance.OnPenSwitch;
            @LineSwitch.started -= instance.OnLineSwitch;
            @LineSwitch.performed -= instance.OnLineSwitch;
            @LineSwitch.canceled -= instance.OnLineSwitch;
            @RectangleSwitch.started -= instance.OnRectangleSwitch;
            @RectangleSwitch.performed -= instance.OnRectangleSwitch;
            @RectangleSwitch.canceled -= instance.OnRectangleSwitch;
            @CircleSwitch.started -= instance.OnCircleSwitch;
            @CircleSwitch.performed -= instance.OnCircleSwitch;
            @CircleSwitch.canceled -= instance.OnCircleSwitch;
        }

        public void RemoveCallbacks(IGridActions instance)
        {
            if (m_Wrapper.m_GridActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGridActions instance)
        {
            foreach (var item in m_Wrapper.m_GridActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GridActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GridActions @Grid => new GridActions(this);
    public interface IGridActions
    {
        void OnMainClick(InputAction.CallbackContext context);
        void OnPenSwitch(InputAction.CallbackContext context);
        void OnLineSwitch(InputAction.CallbackContext context);
        void OnRectangleSwitch(InputAction.CallbackContext context);
        void OnCircleSwitch(InputAction.CallbackContext context);
    }
}
